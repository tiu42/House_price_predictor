# -*- coding: utf-8 -*-
"""Project-TTKH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DHBCzQBxuytfO075rj3ZBLyA7EPhksME
"""

# Import thu vien
import numpy as np
import pandas as pd

# Doc du lieu train
df = pd.read_csv('Train_data.csv')

# Tranh dummy variable trap
X_train = df.iloc[:,1:-2].values
y_train = df.iloc[:,-1].values
y_train = y_train.reshape(y_train.shape[0],1)

# Doc du lieu test
df2 = pd.read_csv('Test_data.csv')

# Tranh dummy variable trap
X_test = df2.iloc[:,1:-2].values
y_test = df2.iloc[:,-1].values
y_test = y_test.reshape(y_test.shape[0],1)

# Dat x0 = 1
X_train = np.vstack((np.ones((X_train.shape[0], )), X_train.T)).T
X_test = np.vstack((np.ones((X_test.shape[0], )), X_test.T)).T

# Mo hinh hqtt
def model(X, Y, learning_rate, iteration, beta):
  m = Y.size
  theta = np.zeros((X.shape[1], 1))
  velocity = theta
  for i in range(iteration + 1):
    y_pred = np.dot(X, theta)
    cost = (1/(2*m))*np.sum(np.square(y_pred - Y))
    d_theta = (1/m)*np.dot(X.T, y_pred - Y)
    velocity = beta*velocity + (1-beta)*d_theta
    theta = theta - learning_rate*velocity
    if(i%75000 == 0):
      print(f'Iteration {i}: cost = {cost}')
  return theta

# Khoi tao cac tham so & bat dau train
iteration = 750000
learning_rate = 0.001
beta = 0.9
theta = model(X_train, y_train, learning_rate = learning_rate, iteration =
iteration, beta = beta)

# Danh gia mo hinh tren du lieu test
y_pred = np.dot(X_test, theta)
sum = 0
sai_so_trung_binh = 0
for i in range(0, y_pred.shape[0]-1):
  du_doan = y_pred[i][0]
  thuc_te = y_test[i][0]
  sai_so = abs(du_doan - thuc_te)
  sum+=sai_so
  print(f'Giá thuê dự đoán: {du_doan:.2f} triệu VND')
  print(f'Giá thực tế : {thuc_te:.2f} triệu VND')
  print(f'Sai số: {sai_so:.2f} triệu VND')
  print('----------')
sai_so_trung_binh = sum/20
print(f'Sai số trung bình: {sai_so_trung_binh:.2f} triệu VND')

# Giao dien
import ipywidgets as widgets
from IPython.display import display
# Create dropdowns for location
location = widgets.Dropdown(
    options=['Hai Bà Trưng', 'Thanh Xuân', 'Đống Đa', 'Hoàn Kiếm', 'Cầu Giấy'],
    description='Địa chỉ:',
)
# Create input fields for area, rooms, and interior
area = widgets.IntText(
    value=50,
    description='Diện tích (m2):',
)
rooms = widgets.IntText(
    value=1,
    description='Số phòng ngủ:',
)
interior = widgets.Dropdown(
    options=[('Cơ bản', 0), ('Đầy đủ', 1)],
    description='Nội thất:',
)
# Button to make prediction
button = widgets.Button(description='Dự đoán giá thuê')
# Output widget to display result
output = widgets.Output()
def predict_rent(b):
    with output:
        output.clear_output()
        # Create a single row of data for prediction
        input_data = {
            'Thanh Xuân': 1 if location.value == 'Thanh Xuân' else 0,
            'Đống Đa': 1 if location.value == 'Đống Đa' else 0,
            'Hoàn Kiếm': 1 if location.value == 'Hoàn Kiếm' else 0,
            'Cầu Giấy': 1 if location.value == 'Cầu Giấy' else 0,
            'Diện tích': area.value,
            'Số phòng ngủ': rooms.value,
            'Nội thất': interior.value,
        }
        input_df = [1.0]
        for p in list(input_data.values()):
          input_df.append(float(p))

        # Predict the rent
        predicted_rent = np.dot(input_df,theta)
        print(f'Giá thuê dự đoán: {predicted_rent[0]:.2f} triệu VND')


button.on_click(predict_rent)

# Display the widgets
display(location, area, rooms, interior, button, output)